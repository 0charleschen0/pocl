/* !!!! AUTOGENERATED FILE generated by convert_type.py !!!!!

   DON'T CHANGE THIS FILE. MAKE YOUR CHANGES TO convert_type.py AND RUN:
   $ ./generate-conversion-type-cl.sh

   OpenCL type conversion functions

   Copyright (c) 2013 Victor Oliveira <victormatheus@gmail.com>

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
*/



  char _cl_overloadable convert_char(char a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(char2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(char4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(char8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(char16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(char3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(char a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(char2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(char4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(char8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(char16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(char3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(char a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(char2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(char4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(char8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(char16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(char3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(char a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(char2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(char4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(char8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(char16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(char3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(char a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(char2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(char4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(char8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(char16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(char3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(char a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(char2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(char4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(char8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(char16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(char3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(char a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(char2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(char4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(char8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(char16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(char3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(char a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(char2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(char4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(char8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(char16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(char3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(char a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(char2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(char4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(char8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(char16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(char3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(char a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(char2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(char4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(char8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(char16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(char3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(uchar a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(uchar2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(uchar4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(uchar8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(uchar16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(uchar3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(uchar a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(uchar2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(uchar4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(uchar8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(uchar16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(uchar3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(uchar a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(uchar2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(uchar4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(uchar8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(uchar16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(uchar3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(uchar a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(uchar2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(uchar4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(uchar8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(uchar16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(uchar3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(uchar a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(uchar2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(uchar4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(uchar8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(uchar16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(uchar3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(uchar a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(uchar2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(uchar4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(uchar8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(uchar16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(uchar3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(uchar a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(uchar2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(uchar4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(uchar8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(uchar16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(uchar3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(uchar a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(uchar2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(uchar4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(uchar8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(uchar16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(uchar3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(uchar a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(uchar2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(uchar4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(uchar8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(uchar16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(uchar3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(uchar a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(uchar2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(uchar4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(uchar8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(uchar16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(uchar3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(short a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(short2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(short4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(short8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(short16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(short3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(short a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(short2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(short4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(short8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(short16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(short3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(short a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(short2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(short4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(short8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(short16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(short3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(short a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(short2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(short4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(short8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(short16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(short3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(short a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(short2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(short4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(short8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(short16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(short3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(short a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(short2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(short4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(short8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(short16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(short3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(short a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(short2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(short4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(short8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(short16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(short3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(short a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(short2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(short4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(short8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(short16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(short3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(short a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(short2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(short4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(short8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(short16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(short3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(short a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(short2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(short4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(short8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(short16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(short3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(ushort a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(ushort2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(ushort4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(ushort8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(ushort16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(ushort3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(ushort a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(ushort2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(ushort4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(ushort8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(ushort16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(ushort3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(ushort a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(ushort2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(ushort4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(ushort8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(ushort16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(ushort3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(ushort a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(ushort2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(ushort4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(ushort8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(ushort16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(ushort3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(ushort a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(ushort2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(ushort4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(ushort8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(ushort16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(ushort3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(ushort a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(ushort2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(ushort4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(ushort8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(ushort16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(ushort3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(ushort a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(ushort2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(ushort4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(ushort8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(ushort16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(ushort3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(ushort a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(ushort2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(ushort4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(ushort8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(ushort16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(ushort3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(ushort a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(ushort2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(ushort4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(ushort8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(ushort16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(ushort3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(ushort a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(ushort2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(ushort4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(ushort8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(ushort16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(ushort3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(int a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(int2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(int4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(int8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(int16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(int3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(int a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(int2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(int4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(int8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(int16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(int3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(int a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(int2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(int4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(int8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(int16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(int3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(int a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(int2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(int4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(int8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(int16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(int3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(int a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(int2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(int4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(int8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(int16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(int3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(int a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(int2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(int4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(int8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(int16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(int3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(int a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(int2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(int4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(int8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(int16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(int3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(int a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(int2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(int4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(int8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(int16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(int3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(int a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(int2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(int4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(int8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(int16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(int3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(int a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(int2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(int4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(int8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(int16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(int3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(uint a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(uint2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(uint4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(uint8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(uint16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(uint3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(uint a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(uint2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(uint4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(uint8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(uint16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(uint3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(uint a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(uint2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(uint4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(uint8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(uint16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(uint3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(uint a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(uint2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(uint4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(uint8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(uint16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(uint3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(uint a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(uint2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(uint4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(uint8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(uint16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(uint3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(uint a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(uint2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(uint4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(uint8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(uint16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(uint3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(uint a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(uint2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(uint4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(uint8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(uint16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(uint3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(uint a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(uint2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(uint4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(uint8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(uint16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(uint3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(uint a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(uint2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(uint4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(uint8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(uint16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(uint3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(uint a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(uint2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(uint4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(uint8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(uint16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(uint3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)
__IF_INT64(

  char _cl_overloadable convert_char(long a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(long2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(long4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(long8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(long16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(long3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }

)
__IF_INT64(

  uchar _cl_overloadable convert_uchar(long a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(long2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(long4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(long8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(long16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(long3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }

)
__IF_INT64(

  short _cl_overloadable convert_short(long a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(long2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(long4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(long8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(long16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(long3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }

)
__IF_INT64(

  ushort _cl_overloadable convert_ushort(long a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(long2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(long4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(long8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(long16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(long3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }

)
__IF_INT64(

  int _cl_overloadable convert_int(long a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(long2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(long4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(long8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(long16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(long3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }

)
__IF_INT64(

  uint _cl_overloadable convert_uint(long a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(long2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(long4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(long8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(long16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(long3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

)
__IF_INT64(

  long _cl_overloadable convert_long(long a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(long2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(long4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(long8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(long16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(long3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(long a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(long2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(long4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(long8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(long16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(long3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)
__IF_INT64(

  float _cl_overloadable convert_float(long a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(long2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(long4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(long8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(long16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(long3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

)
__IF_INT64(

  double _cl_overloadable convert_double(long a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(long2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(long4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(long8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(long16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(long3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)
__IF_INT64(

  char _cl_overloadable convert_char(ulong a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(ulong2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(ulong4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(ulong8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(ulong16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(ulong3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }

)
__IF_INT64(

  uchar _cl_overloadable convert_uchar(ulong a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(ulong2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(ulong4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(ulong8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(ulong16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(ulong3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }

)
__IF_INT64(

  short _cl_overloadable convert_short(ulong a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(ulong2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(ulong4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(ulong8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(ulong16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(ulong3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }

)
__IF_INT64(

  ushort _cl_overloadable convert_ushort(ulong a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(ulong2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(ulong4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(ulong8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(ulong16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(ulong3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }

)
__IF_INT64(

  int _cl_overloadable convert_int(ulong a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(ulong2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(ulong4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(ulong8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(ulong16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(ulong3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }

)
__IF_INT64(

  uint _cl_overloadable convert_uint(ulong a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(ulong2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(ulong4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(ulong8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(ulong16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(ulong3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

)
__IF_INT64(

  long _cl_overloadable convert_long(ulong a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(ulong2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(ulong4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(ulong8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(ulong16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(ulong3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(ulong a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(ulong2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(ulong4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(ulong8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(ulong16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(ulong3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)
__IF_INT64(

  float _cl_overloadable convert_float(ulong a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(ulong2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(ulong4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(ulong8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(ulong16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(ulong3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

)
__IF_INT64(

  double _cl_overloadable convert_double(ulong a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(ulong2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(ulong4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(ulong8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(ulong16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(ulong3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)

  char _cl_overloadable convert_char(float a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(float2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(float4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(float8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(float16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(float3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }


  uchar _cl_overloadable convert_uchar(float a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(float2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(float4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(float8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(float16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(float3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }


  short _cl_overloadable convert_short(float a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(float2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(float4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(float8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(float16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(float3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }


  ushort _cl_overloadable convert_ushort(float a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(float2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(float4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(float8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(float16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(float3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }


  int _cl_overloadable convert_int(float a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(float2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(float4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(float8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(float16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(float3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }


  uint _cl_overloadable convert_uint(float a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(float2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(float4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(float8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(float16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(float3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

__IF_INT64(

  long _cl_overloadable convert_long(float a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(float2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(float4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(float8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(float16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(float3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(float a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(float2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(float4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(float8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(float16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(float3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)

  float _cl_overloadable convert_float(float a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(float2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(float4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(float8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(float16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(float3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

__IF_FP64(

  double _cl_overloadable convert_double(float a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(float2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(float4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(float8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(float16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(float3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)
__IF_FP64(

  char _cl_overloadable convert_char(double a)
  {
    return (char)a;
  }


  char2 _cl_overloadable convert_char2(double2 a)
  {
    return (char2)(convert_char(a.lo), convert_char(a.hi));
  }


  char4 _cl_overloadable convert_char4(double4 a)
  {
    return (char4)(convert_char2(a.lo), convert_char2(a.hi));
  }


  char8 _cl_overloadable convert_char8(double8 a)
  {
    return (char8)(convert_char4(a.lo), convert_char4(a.hi));
  }


  char16 _cl_overloadable convert_char16(double16 a)
  {
    return (char16)(convert_char8(a.lo), convert_char8(a.hi));
  }


  char3 _cl_overloadable convert_char3(double3 a)
  {
    return (char3)(convert_char2(a.s01), convert_char(a.s2));
  }

)
__IF_FP64(

  uchar _cl_overloadable convert_uchar(double a)
  {
    return (uchar)a;
  }


  uchar2 _cl_overloadable convert_uchar2(double2 a)
  {
    return (uchar2)(convert_uchar(a.lo), convert_uchar(a.hi));
  }


  uchar4 _cl_overloadable convert_uchar4(double4 a)
  {
    return (uchar4)(convert_uchar2(a.lo), convert_uchar2(a.hi));
  }


  uchar8 _cl_overloadable convert_uchar8(double8 a)
  {
    return (uchar8)(convert_uchar4(a.lo), convert_uchar4(a.hi));
  }


  uchar16 _cl_overloadable convert_uchar16(double16 a)
  {
    return (uchar16)(convert_uchar8(a.lo), convert_uchar8(a.hi));
  }


  uchar3 _cl_overloadable convert_uchar3(double3 a)
  {
    return (uchar3)(convert_uchar2(a.s01), convert_uchar(a.s2));
  }

)
__IF_FP64(

  short _cl_overloadable convert_short(double a)
  {
    return (short)a;
  }


  short2 _cl_overloadable convert_short2(double2 a)
  {
    return (short2)(convert_short(a.lo), convert_short(a.hi));
  }


  short4 _cl_overloadable convert_short4(double4 a)
  {
    return (short4)(convert_short2(a.lo), convert_short2(a.hi));
  }


  short8 _cl_overloadable convert_short8(double8 a)
  {
    return (short8)(convert_short4(a.lo), convert_short4(a.hi));
  }


  short16 _cl_overloadable convert_short16(double16 a)
  {
    return (short16)(convert_short8(a.lo), convert_short8(a.hi));
  }


  short3 _cl_overloadable convert_short3(double3 a)
  {
    return (short3)(convert_short2(a.s01), convert_short(a.s2));
  }

)
__IF_FP64(

  ushort _cl_overloadable convert_ushort(double a)
  {
    return (ushort)a;
  }


  ushort2 _cl_overloadable convert_ushort2(double2 a)
  {
    return (ushort2)(convert_ushort(a.lo), convert_ushort(a.hi));
  }


  ushort4 _cl_overloadable convert_ushort4(double4 a)
  {
    return (ushort4)(convert_ushort2(a.lo), convert_ushort2(a.hi));
  }


  ushort8 _cl_overloadable convert_ushort8(double8 a)
  {
    return (ushort8)(convert_ushort4(a.lo), convert_ushort4(a.hi));
  }


  ushort16 _cl_overloadable convert_ushort16(double16 a)
  {
    return (ushort16)(convert_ushort8(a.lo), convert_ushort8(a.hi));
  }


  ushort3 _cl_overloadable convert_ushort3(double3 a)
  {
    return (ushort3)(convert_ushort2(a.s01), convert_ushort(a.s2));
  }

)
__IF_FP64(

  int _cl_overloadable convert_int(double a)
  {
    return (int)a;
  }


  int2 _cl_overloadable convert_int2(double2 a)
  {
    return (int2)(convert_int(a.lo), convert_int(a.hi));
  }


  int4 _cl_overloadable convert_int4(double4 a)
  {
    return (int4)(convert_int2(a.lo), convert_int2(a.hi));
  }


  int8 _cl_overloadable convert_int8(double8 a)
  {
    return (int8)(convert_int4(a.lo), convert_int4(a.hi));
  }


  int16 _cl_overloadable convert_int16(double16 a)
  {
    return (int16)(convert_int8(a.lo), convert_int8(a.hi));
  }


  int3 _cl_overloadable convert_int3(double3 a)
  {
    return (int3)(convert_int2(a.s01), convert_int(a.s2));
  }

)
__IF_FP64(

  uint _cl_overloadable convert_uint(double a)
  {
    return (uint)a;
  }


  uint2 _cl_overloadable convert_uint2(double2 a)
  {
    return (uint2)(convert_uint(a.lo), convert_uint(a.hi));
  }


  uint4 _cl_overloadable convert_uint4(double4 a)
  {
    return (uint4)(convert_uint2(a.lo), convert_uint2(a.hi));
  }


  uint8 _cl_overloadable convert_uint8(double8 a)
  {
    return (uint8)(convert_uint4(a.lo), convert_uint4(a.hi));
  }


  uint16 _cl_overloadable convert_uint16(double16 a)
  {
    return (uint16)(convert_uint8(a.lo), convert_uint8(a.hi));
  }


  uint3 _cl_overloadable convert_uint3(double3 a)
  {
    return (uint3)(convert_uint2(a.s01), convert_uint(a.s2));
  }

)
__IF_INT64(

  long _cl_overloadable convert_long(double a)
  {
    return (long)a;
  }


  long2 _cl_overloadable convert_long2(double2 a)
  {
    return (long2)(convert_long(a.lo), convert_long(a.hi));
  }


  long4 _cl_overloadable convert_long4(double4 a)
  {
    return (long4)(convert_long2(a.lo), convert_long2(a.hi));
  }


  long8 _cl_overloadable convert_long8(double8 a)
  {
    return (long8)(convert_long4(a.lo), convert_long4(a.hi));
  }


  long16 _cl_overloadable convert_long16(double16 a)
  {
    return (long16)(convert_long8(a.lo), convert_long8(a.hi));
  }


  long3 _cl_overloadable convert_long3(double3 a)
  {
    return (long3)(convert_long2(a.s01), convert_long(a.s2));
  }

)
__IF_INT64(

  ulong _cl_overloadable convert_ulong(double a)
  {
    return (ulong)a;
  }


  ulong2 _cl_overloadable convert_ulong2(double2 a)
  {
    return (ulong2)(convert_ulong(a.lo), convert_ulong(a.hi));
  }


  ulong4 _cl_overloadable convert_ulong4(double4 a)
  {
    return (ulong4)(convert_ulong2(a.lo), convert_ulong2(a.hi));
  }


  ulong8 _cl_overloadable convert_ulong8(double8 a)
  {
    return (ulong8)(convert_ulong4(a.lo), convert_ulong4(a.hi));
  }


  ulong16 _cl_overloadable convert_ulong16(double16 a)
  {
    return (ulong16)(convert_ulong8(a.lo), convert_ulong8(a.hi));
  }


  ulong3 _cl_overloadable convert_ulong3(double3 a)
  {
    return (ulong3)(convert_ulong2(a.s01), convert_ulong(a.s2));
  }

)
__IF_FP64(

  float _cl_overloadable convert_float(double a)
  {
    return (float)a;
  }


  float2 _cl_overloadable convert_float2(double2 a)
  {
    return (float2)(convert_float(a.lo), convert_float(a.hi));
  }


  float4 _cl_overloadable convert_float4(double4 a)
  {
    return (float4)(convert_float2(a.lo), convert_float2(a.hi));
  }


  float8 _cl_overloadable convert_float8(double8 a)
  {
    return (float8)(convert_float4(a.lo), convert_float4(a.hi));
  }


  float16 _cl_overloadable convert_float16(double16 a)
  {
    return (float16)(convert_float8(a.lo), convert_float8(a.hi));
  }


  float3 _cl_overloadable convert_float3(double3 a)
  {
    return (float3)(convert_float2(a.s01), convert_float(a.s2));
  }

)
__IF_FP64(

  double _cl_overloadable convert_double(double a)
  {
    return (double)a;
  }


  double2 _cl_overloadable convert_double2(double2 a)
  {
    return (double2)(convert_double(a.lo), convert_double(a.hi));
  }


  double4 _cl_overloadable convert_double4(double4 a)
  {
    return (double4)(convert_double2(a.lo), convert_double2(a.hi));
  }


  double8 _cl_overloadable convert_double8(double8 a)
  {
    return (double8)(convert_double4(a.lo), convert_double4(a.hi));
  }


  double16 _cl_overloadable convert_double16(double16 a)
  {
    return (double16)(convert_double8(a.lo), convert_double8(a.hi));
  }


  double3 _cl_overloadable convert_double3(double3 a)
  {
    return (double3)(convert_double2(a.s01), convert_double(a.s2));
  }

)
  char _cl_overloadable
  convert_char_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (char)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (char)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char2(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (char)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (char)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char4(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (char)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (char)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char8(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (char)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (char)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char16(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (char)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (char)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar(a < (char)0) ? (uchar)0 :
              convert_uchar(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a < (char)0      ) ? (uchar)0 :
            convert_uchar(a > (char)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar2(a < (char)0) ? (uchar2)0 :
              convert_uchar2(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a < (char)0      ) ? (uchar2)0 :
            convert_uchar2(a > (char)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar4(a < (char)0) ? (uchar4)0 :
              convert_uchar4(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a < (char)0      ) ? (uchar4)0 :
            convert_uchar4(a > (char)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar8(a < (char)0) ? (uchar8)0 :
              convert_uchar8(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a < (char)0      ) ? (uchar8)0 :
            convert_uchar8(a > (char)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar16(a < (char)0) ? (uchar16)0 :
              convert_uchar16(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a < (char)0      ) ? (uchar16)0 :
            convert_uchar16(a > (char)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (char)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (char)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short2(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (char)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (char)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short4(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (char)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (char)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short8(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (char)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (char)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short16(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (char)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (char)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort(a < (char)0) ? (ushort)0 :
              convert_ushort(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a < (char)0      ) ? (ushort)0 :
            convert_ushort(a > (char)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort2(a < (char)0) ? (ushort2)0 :
              convert_ushort2(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a < (char)0      ) ? (ushort2)0 :
            convert_ushort2(a > (char)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort4(a < (char)0) ? (ushort4)0 :
              convert_ushort4(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a < (char)0      ) ? (ushort4)0 :
            convert_ushort4(a > (char)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort8(a < (char)0) ? (ushort8)0 :
              convert_ushort8(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a < (char)0      ) ? (ushort8)0 :
            convert_ushort8(a > (char)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort16(a < (char)0) ? (ushort16)0 :
              convert_ushort16(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a < (char)0      ) ? (ushort16)0 :
            convert_ushort16(a > (char)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (char)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (char)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int2(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (char)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (char)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int4(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (char)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (char)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int8(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (char)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (char)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int16(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (char)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (char)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint(a < (char)0) ? (uint)0 :
              convert_uint(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a < (char)0      ) ? (uint)0 :
            convert_uint(a > (char)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint2(a < (char)0) ? (uint2)0 :
              convert_uint2(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a < (char)0      ) ? (uint2)0 :
            convert_uint2(a > (char)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint4(a < (char)0) ? (uint4)0 :
              convert_uint4(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a < (char)0      ) ? (uint4)0 :
            convert_uint4(a > (char)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint8(a < (char)0) ? (uint8)0 :
              convert_uint8(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a < (char)0      ) ? (uint8)0 :
            convert_uint8(a > (char)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint16(a < (char)0) ? (uint16)0 :
              convert_uint16(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a < (char)0      ) ? (uint16)0 :
            convert_uint16(a > (char)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (char)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (char)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long2(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (char)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (char)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long4(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (char)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (char)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long8(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (char)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (char)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long16(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (char)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (char)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(char a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong(a < (char)0) ? (ulong)0 :
              convert_ulong(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a < (char)0      ) ? (ulong)0 :
            convert_ulong(a > (char)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(char2 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong2(a < (char)0) ? (ulong2)0 :
              convert_ulong2(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a < (char)0      ) ? (ulong2)0 :
            convert_ulong2(a > (char)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(char4 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong4(a < (char)0) ? (ulong4)0 :
              convert_ulong4(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a < (char)0      ) ? (ulong4)0 :
            convert_ulong4(a > (char)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(char8 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong8(a < (char)0) ? (ulong8)0 :
              convert_ulong8(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a < (char)0      ) ? (ulong8)0 :
            convert_ulong8(a > (char)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(char16 a)
  {
    int const src_size = sizeof(char);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong16(a < (char)0) ? (ulong16)0 :
              convert_ulong16(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a < (char)0      ) ? (ulong16)0 :
            convert_ulong16(a > (char)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a > (uchar)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char2(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a > (uchar)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char4(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a > (uchar)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char8(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a > (uchar)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char16(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a > (uchar)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a > (uchar)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar2(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a > (uchar)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar4(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a > (uchar)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar8(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a > (uchar)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar16(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a > (uchar)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a > (uchar)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short2(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a > (uchar)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short4(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a > (uchar)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short8(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a > (uchar)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short16(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a > (uchar)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a > (uchar)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort2(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a > (uchar)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort4(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a > (uchar)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort8(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a > (uchar)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort16(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a > (uchar)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int(a);
    int const DST_MAX = INT_MAX;
    return (convert_int(a > (uchar)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int2(a);
    int const DST_MAX = INT_MAX;
    return (convert_int2(a > (uchar)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int4(a);
    int const DST_MAX = INT_MAX;
    return (convert_int4(a > (uchar)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int8(a);
    int const DST_MAX = INT_MAX;
    return (convert_int8(a > (uchar)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int16(a);
    int const DST_MAX = INT_MAX;
    return (convert_int16(a > (uchar)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a > (uchar)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint2(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a > (uchar)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint4(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a > (uchar)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint8(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a > (uchar)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint16(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a > (uchar)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long(a > (uchar)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long2(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a > (uchar)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long4(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a > (uchar)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long8(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a > (uchar)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long16(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a > (uchar)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(uchar a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a > (uchar)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(uchar2 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong2(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a > (uchar)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(uchar4 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong4(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a > (uchar)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(uchar8 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong8(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a > (uchar)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(uchar16 a)
  {
    int const src_size = sizeof(uchar);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong16(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a > (uchar)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (short)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (short)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char2(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (short)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (short)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char4(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (short)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (short)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char8(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (short)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (short)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char16(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (short)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (short)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar(a < (short)0) ? (uchar)0 :
              convert_uchar(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a < (short)0      ) ? (uchar)0 :
            convert_uchar(a > (short)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar2(a < (short)0) ? (uchar2)0 :
              convert_uchar2(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a < (short)0      ) ? (uchar2)0 :
            convert_uchar2(a > (short)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar4(a < (short)0) ? (uchar4)0 :
              convert_uchar4(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a < (short)0      ) ? (uchar4)0 :
            convert_uchar4(a > (short)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar8(a < (short)0) ? (uchar8)0 :
              convert_uchar8(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a < (short)0      ) ? (uchar8)0 :
            convert_uchar8(a > (short)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar16(a < (short)0) ? (uchar16)0 :
              convert_uchar16(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a < (short)0      ) ? (uchar16)0 :
            convert_uchar16(a > (short)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (short)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (short)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short2(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (short)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (short)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short4(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (short)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (short)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short8(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (short)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (short)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short16(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (short)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (short)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort(a < (short)0) ? (ushort)0 :
              convert_ushort(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a < (short)0      ) ? (ushort)0 :
            convert_ushort(a > (short)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort2(a < (short)0) ? (ushort2)0 :
              convert_ushort2(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a < (short)0      ) ? (ushort2)0 :
            convert_ushort2(a > (short)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort4(a < (short)0) ? (ushort4)0 :
              convert_ushort4(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a < (short)0      ) ? (ushort4)0 :
            convert_ushort4(a > (short)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort8(a < (short)0) ? (ushort8)0 :
              convert_ushort8(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a < (short)0      ) ? (ushort8)0 :
            convert_ushort8(a > (short)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort16(a < (short)0) ? (ushort16)0 :
              convert_ushort16(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a < (short)0      ) ? (ushort16)0 :
            convert_ushort16(a > (short)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (short)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (short)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int2(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (short)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (short)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int4(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (short)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (short)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int8(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (short)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (short)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int16(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (short)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (short)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint(a < (short)0) ? (uint)0 :
              convert_uint(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a < (short)0      ) ? (uint)0 :
            convert_uint(a > (short)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint2(a < (short)0) ? (uint2)0 :
              convert_uint2(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a < (short)0      ) ? (uint2)0 :
            convert_uint2(a > (short)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint4(a < (short)0) ? (uint4)0 :
              convert_uint4(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a < (short)0      ) ? (uint4)0 :
            convert_uint4(a > (short)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint8(a < (short)0) ? (uint8)0 :
              convert_uint8(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a < (short)0      ) ? (uint8)0 :
            convert_uint8(a > (short)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint16(a < (short)0) ? (uint16)0 :
              convert_uint16(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a < (short)0      ) ? (uint16)0 :
            convert_uint16(a > (short)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (short)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (short)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long2(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (short)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (short)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long4(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (short)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (short)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long8(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (short)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (short)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long16(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (short)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (short)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(short a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong(a < (short)0) ? (ulong)0 :
              convert_ulong(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a < (short)0      ) ? (ulong)0 :
            convert_ulong(a > (short)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(short2 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong2(a < (short)0) ? (ulong2)0 :
              convert_ulong2(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a < (short)0      ) ? (ulong2)0 :
            convert_ulong2(a > (short)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(short4 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong4(a < (short)0) ? (ulong4)0 :
              convert_ulong4(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a < (short)0      ) ? (ulong4)0 :
            convert_ulong4(a > (short)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(short8 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong8(a < (short)0) ? (ulong8)0 :
              convert_ulong8(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a < (short)0      ) ? (ulong8)0 :
            convert_ulong8(a > (short)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(short16 a)
  {
    int const src_size = sizeof(short);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong16(a < (short)0) ? (ulong16)0 :
              convert_ulong16(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a < (short)0      ) ? (ulong16)0 :
            convert_ulong16(a > (short)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a > (ushort)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char2(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a > (ushort)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char4(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a > (ushort)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char8(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a > (ushort)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char16(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a > (ushort)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a > (ushort)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar2(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a > (ushort)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar4(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a > (ushort)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar8(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a > (ushort)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar16(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a > (ushort)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a > (ushort)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short2(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a > (ushort)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short4(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a > (ushort)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short8(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a > (ushort)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short16(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a > (ushort)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a > (ushort)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort2(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a > (ushort)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort4(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a > (ushort)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort8(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a > (ushort)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort16(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a > (ushort)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int(a);
    int const DST_MAX = INT_MAX;
    return (convert_int(a > (ushort)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int2(a);
    int const DST_MAX = INT_MAX;
    return (convert_int2(a > (ushort)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int4(a);
    int const DST_MAX = INT_MAX;
    return (convert_int4(a > (ushort)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int8(a);
    int const DST_MAX = INT_MAX;
    return (convert_int8(a > (ushort)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int16(a);
    int const DST_MAX = INT_MAX;
    return (convert_int16(a > (ushort)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a > (ushort)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint2(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a > (ushort)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint4(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a > (ushort)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint8(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a > (ushort)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint16(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a > (ushort)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long(a > (ushort)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long2(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a > (ushort)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long4(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a > (ushort)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long8(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a > (ushort)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long16(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a > (ushort)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(ushort a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a > (ushort)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(ushort2 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong2(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a > (ushort)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(ushort4 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong4(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a > (ushort)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(ushort8 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong8(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a > (ushort)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(ushort16 a)
  {
    int const src_size = sizeof(ushort);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong16(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a > (ushort)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (int)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (int)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char2(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (int)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (int)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char4(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (int)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (int)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char8(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (int)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (int)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char16(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (int)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (int)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar(a < (int)0) ? (uchar)0 :
              convert_uchar(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a < (int)0      ) ? (uchar)0 :
            convert_uchar(a > (int)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar2(a < (int)0) ? (uchar2)0 :
              convert_uchar2(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a < (int)0      ) ? (uchar2)0 :
            convert_uchar2(a > (int)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar4(a < (int)0) ? (uchar4)0 :
              convert_uchar4(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a < (int)0      ) ? (uchar4)0 :
            convert_uchar4(a > (int)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar8(a < (int)0) ? (uchar8)0 :
              convert_uchar8(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a < (int)0      ) ? (uchar8)0 :
            convert_uchar8(a > (int)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar16(a < (int)0) ? (uchar16)0 :
              convert_uchar16(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a < (int)0      ) ? (uchar16)0 :
            convert_uchar16(a > (int)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (int)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (int)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short2(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (int)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (int)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short4(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (int)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (int)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short8(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (int)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (int)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short16(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (int)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (int)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort(a < (int)0) ? (ushort)0 :
              convert_ushort(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a < (int)0      ) ? (ushort)0 :
            convert_ushort(a > (int)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort2(a < (int)0) ? (ushort2)0 :
              convert_ushort2(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a < (int)0      ) ? (ushort2)0 :
            convert_ushort2(a > (int)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort4(a < (int)0) ? (ushort4)0 :
              convert_ushort4(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a < (int)0      ) ? (ushort4)0 :
            convert_ushort4(a > (int)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort8(a < (int)0) ? (ushort8)0 :
              convert_ushort8(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a < (int)0      ) ? (ushort8)0 :
            convert_ushort8(a > (int)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort16(a < (int)0) ? (ushort16)0 :
              convert_ushort16(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a < (int)0      ) ? (ushort16)0 :
            convert_ushort16(a > (int)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (int)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (int)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int2(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (int)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (int)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int4(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (int)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (int)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int8(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (int)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (int)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int16(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (int)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (int)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint(a < (int)0) ? (uint)0 :
              convert_uint(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a < (int)0      ) ? (uint)0 :
            convert_uint(a > (int)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint2(a < (int)0) ? (uint2)0 :
              convert_uint2(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a < (int)0      ) ? (uint2)0 :
            convert_uint2(a > (int)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint4(a < (int)0) ? (uint4)0 :
              convert_uint4(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a < (int)0      ) ? (uint4)0 :
            convert_uint4(a > (int)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint8(a < (int)0) ? (uint8)0 :
              convert_uint8(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a < (int)0      ) ? (uint8)0 :
            convert_uint8(a > (int)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint16(a < (int)0) ? (uint16)0 :
              convert_uint16(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a < (int)0      ) ? (uint16)0 :
            convert_uint16(a > (int)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (int)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (int)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long2(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (int)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (int)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long4(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (int)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (int)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long8(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (int)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (int)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long16(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (int)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (int)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(int a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong(a < (int)0) ? (ulong)0 :
              convert_ulong(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a < (int)0      ) ? (ulong)0 :
            convert_ulong(a > (int)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(int2 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong2(a < (int)0) ? (ulong2)0 :
              convert_ulong2(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a < (int)0      ) ? (ulong2)0 :
            convert_ulong2(a > (int)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(int4 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong4(a < (int)0) ? (ulong4)0 :
              convert_ulong4(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a < (int)0      ) ? (ulong4)0 :
            convert_ulong4(a > (int)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(int8 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong8(a < (int)0) ? (ulong8)0 :
              convert_ulong8(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a < (int)0      ) ? (ulong8)0 :
            convert_ulong8(a > (int)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(int16 a)
  {
    int const src_size = sizeof(int);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong16(a < (int)0) ? (ulong16)0 :
              convert_ulong16(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a < (int)0      ) ? (ulong16)0 :
            convert_ulong16(a > (int)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a > (uint)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char2(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a > (uint)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char4(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a > (uint)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char8(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a > (uint)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char16(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a > (uint)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a > (uint)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar2(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a > (uint)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar4(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a > (uint)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar8(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a > (uint)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar16(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a > (uint)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a > (uint)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short2(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a > (uint)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short4(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a > (uint)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short8(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a > (uint)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short16(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a > (uint)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a > (uint)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort2(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a > (uint)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort4(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a > (uint)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort8(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a > (uint)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort16(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a > (uint)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int(a);
    int const DST_MAX = INT_MAX;
    return (convert_int(a > (uint)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int2(a);
    int const DST_MAX = INT_MAX;
    return (convert_int2(a > (uint)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int4(a);
    int const DST_MAX = INT_MAX;
    return (convert_int4(a > (uint)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int8(a);
    int const DST_MAX = INT_MAX;
    return (convert_int8(a > (uint)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int16(a);
    int const DST_MAX = INT_MAX;
    return (convert_int16(a > (uint)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a > (uint)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint2(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a > (uint)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint4(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a > (uint)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint8(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a > (uint)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint16(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a > (uint)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long(a > (uint)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long2(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a > (uint)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long4(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a > (uint)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long8(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a > (uint)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long16(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a > (uint)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(uint a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a > (uint)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(uint2 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong2(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a > (uint)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(uint4 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong4(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a > (uint)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(uint8 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong8(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a > (uint)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(uint16 a)
  {
    int const src_size = sizeof(uint);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong16(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a > (uint)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
__IF_INT64(
  char _cl_overloadable
  convert_char_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (long)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (long)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char2(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (long)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (long)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char4(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (long)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (long)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char8(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (long)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (long)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char16(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (long)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (long)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
)
__IF_INT64(
  uchar _cl_overloadable
  convert_uchar_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar(a < (long)0) ? (uchar)0 :
              convert_uchar(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a < (long)0      ) ? (uchar)0 :
            convert_uchar(a > (long)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar2(a < (long)0) ? (uchar2)0 :
              convert_uchar2(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a < (long)0      ) ? (uchar2)0 :
            convert_uchar2(a > (long)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar4(a < (long)0) ? (uchar4)0 :
              convert_uchar4(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a < (long)0      ) ? (uchar4)0 :
            convert_uchar4(a > (long)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar8(a < (long)0) ? (uchar8)0 :
              convert_uchar8(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a < (long)0      ) ? (uchar8)0 :
            convert_uchar8(a > (long)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar16(a < (long)0) ? (uchar16)0 :
              convert_uchar16(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a < (long)0      ) ? (uchar16)0 :
            convert_uchar16(a > (long)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
)
__IF_INT64(
  short _cl_overloadable
  convert_short_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (long)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (long)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short2(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (long)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (long)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short4(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (long)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (long)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short8(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (long)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (long)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short16(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (long)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (long)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
)
__IF_INT64(
  ushort _cl_overloadable
  convert_ushort_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort(a < (long)0) ? (ushort)0 :
              convert_ushort(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a < (long)0      ) ? (ushort)0 :
            convert_ushort(a > (long)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort2(a < (long)0) ? (ushort2)0 :
              convert_ushort2(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a < (long)0      ) ? (ushort2)0 :
            convert_ushort2(a > (long)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort4(a < (long)0) ? (ushort4)0 :
              convert_ushort4(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a < (long)0      ) ? (ushort4)0 :
            convert_ushort4(a > (long)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort8(a < (long)0) ? (ushort8)0 :
              convert_ushort8(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a < (long)0      ) ? (ushort8)0 :
            convert_ushort8(a > (long)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort16(a < (long)0) ? (ushort16)0 :
              convert_ushort16(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a < (long)0      ) ? (ushort16)0 :
            convert_ushort16(a > (long)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
)
__IF_INT64(
  int _cl_overloadable
  convert_int_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (long)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (long)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int2(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (long)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (long)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int4(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (long)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (long)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int8(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (long)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (long)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int16(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (long)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (long)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
)
__IF_INT64(
  uint _cl_overloadable
  convert_uint_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint(a < (long)0) ? (uint)0 :
              convert_uint(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a < (long)0      ) ? (uint)0 :
            convert_uint(a > (long)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint2(a < (long)0) ? (uint2)0 :
              convert_uint2(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a < (long)0      ) ? (uint2)0 :
            convert_uint2(a > (long)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint4(a < (long)0) ? (uint4)0 :
              convert_uint4(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a < (long)0      ) ? (uint4)0 :
            convert_uint4(a > (long)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint8(a < (long)0) ? (uint8)0 :
              convert_uint8(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a < (long)0      ) ? (uint8)0 :
            convert_uint8(a > (long)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint16(a < (long)0) ? (uint16)0 :
              convert_uint16(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a < (long)0      ) ? (uint16)0 :
            convert_uint16(a > (long)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
)
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (long)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (long)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long2(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (long)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (long)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long4(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (long)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (long)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long8(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (long)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (long)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long16(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (long)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (long)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(long a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong(a < (long)0) ? (ulong)0 :
              convert_ulong(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a < (long)0      ) ? (ulong)0 :
            convert_ulong(a > (long)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(long2 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong2(a < (long)0) ? (ulong2)0 :
              convert_ulong2(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a < (long)0      ) ? (ulong2)0 :
            convert_ulong2(a > (long)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(long4 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong4(a < (long)0) ? (ulong4)0 :
              convert_ulong4(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a < (long)0      ) ? (ulong4)0 :
            convert_ulong4(a > (long)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(long8 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong8(a < (long)0) ? (ulong8)0 :
              convert_ulong8(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a < (long)0      ) ? (ulong8)0 :
            convert_ulong8(a > (long)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(long16 a)
  {
    int const src_size = sizeof(long);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong16(a < (long)0) ? (ulong16)0 :
              convert_ulong16(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a < (long)0      ) ? (ulong16)0 :
            convert_ulong16(a > (long)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
__IF_INT64(
  char _cl_overloadable
  convert_char_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a > (ulong)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char2(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a > (ulong)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char4(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a > (ulong)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char8(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a > (ulong)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(char);
    if (dst_size > src_size) return convert_char16(a);
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a > (ulong)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
)
__IF_INT64(
  uchar _cl_overloadable
  convert_uchar_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a > (ulong)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar2(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a > (ulong)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar4(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a > (ulong)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar8(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a > (ulong)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) return convert_uchar16(a);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a > (ulong)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
)
__IF_INT64(
  short _cl_overloadable
  convert_short_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a > (ulong)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short2(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a > (ulong)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short4(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a > (ulong)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short8(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a > (ulong)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(short);
    if (dst_size > src_size) return convert_short16(a);
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a > (ulong)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
)
__IF_INT64(
  ushort _cl_overloadable
  convert_ushort_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a > (ulong)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort2(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a > (ulong)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort4(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a > (ulong)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort8(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a > (ulong)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) return convert_ushort16(a);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a > (ulong)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
)
__IF_INT64(
  int _cl_overloadable
  convert_int_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int(a);
    int const DST_MAX = INT_MAX;
    return (convert_int(a > (ulong)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int2(a);
    int const DST_MAX = INT_MAX;
    return (convert_int2(a > (ulong)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int4(a);
    int const DST_MAX = INT_MAX;
    return (convert_int4(a > (ulong)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int8(a);
    int const DST_MAX = INT_MAX;
    return (convert_int8(a > (ulong)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(int);
    if (dst_size > src_size) return convert_int16(a);
    int const DST_MAX = INT_MAX;
    return (convert_int16(a > (ulong)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
)
__IF_INT64(
  uint _cl_overloadable
  convert_uint_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a > (ulong)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint2(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a > (ulong)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint4(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a > (ulong)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint8(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a > (ulong)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) return convert_uint16(a);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a > (ulong)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
)
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long(a > (ulong)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long2(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a > (ulong)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long4(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a > (ulong)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long8(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a > (ulong)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(long);
    if (dst_size > src_size) return convert_long16(a);
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a > (ulong)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(ulong a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a > (ulong)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(ulong2 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong2(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a > (ulong)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(ulong4 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong4(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a > (ulong)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(ulong8 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong8(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a > (ulong)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(ulong16 a)
  {
    int const src_size = sizeof(ulong);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) return convert_ulong16(a);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a > (ulong)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
  char _cl_overloadable
  convert_char_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(char);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (float)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (float)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(char);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (float)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (float)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(char);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (float)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (float)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(char);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (float)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (float)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(char);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (float)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (float)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
  uchar _cl_overloadable
  convert_uchar_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uchar);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a > (float)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uchar);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a > (float)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uchar);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a > (float)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uchar);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a > (float)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uchar);
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a > (float)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
  short _cl_overloadable
  convert_short_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(short);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (float)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (float)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(short);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (float)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (float)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(short);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (float)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (float)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(short);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (float)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (float)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(short);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (float)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (float)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
  ushort _cl_overloadable
  convert_ushort_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ushort);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a > (float)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ushort);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a > (float)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ushort);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a > (float)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ushort);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a > (float)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ushort);
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a > (float)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
  int _cl_overloadable
  convert_int_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(int);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (float)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (float)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(int);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (float)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (float)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(int);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (float)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (float)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(int);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (float)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (float)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(int);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (float)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (float)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
  uint _cl_overloadable
  convert_uint_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uint);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a > (float)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uint);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a > (float)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uint);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a > (float)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uint);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a > (float)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(uint);
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a > (float)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(long);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (float)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (float)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(long);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (float)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (float)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(long);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (float)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (float)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(long);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (float)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (float)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(long);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (float)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (float)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(float a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ulong);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a > (float)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(float2 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ulong);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a > (float)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(float4 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ulong);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a > (float)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(float8 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ulong);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a > (float)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(float16 a)
  {
    int const src_size = sizeof(float);
    int const dst_size = sizeof(ulong);
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a > (float)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
__IF_FP64(
  char _cl_overloadable
  convert_char_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char(a < (double)DST_MIN) ? (char)DST_MIN :
            convert_char(a > (double)DST_MAX) ? (char)DST_MAX :
            convert_char(a));
  }
    
  char2 _cl_overloadable
  convert_char2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char2(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char2(a < (double)DST_MIN) ? (char2)DST_MIN :
            convert_char2(a > (double)DST_MAX) ? (char2)DST_MAX :
            convert_char2(a));
  }
    
  char4 _cl_overloadable
  convert_char4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char4(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char4(a < (double)DST_MIN) ? (char4)DST_MIN :
            convert_char4(a > (double)DST_MAX) ? (char4)DST_MAX :
            convert_char4(a));
  }
    
  char8 _cl_overloadable
  convert_char8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char8(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char8(a < (double)DST_MIN) ? (char8)DST_MIN :
            convert_char8(a > (double)DST_MAX) ? (char8)DST_MAX :
            convert_char8(a));
  }
    
  char16 _cl_overloadable
  convert_char16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(char);
    if (dst_size >= src_size) return convert_char16(a);
    char const DST_MIN = CHAR_MIN;
    char const DST_MAX = CHAR_MAX;
    return (convert_char16(a < (double)DST_MIN) ? (char16)DST_MIN :
            convert_char16(a > (double)DST_MAX) ? (char16)DST_MAX :
            convert_char16(a));
  }
    
)
__IF_FP64(
  uchar _cl_overloadable
  convert_uchar_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar(a < (double)0) ? (uchar)0 :
              convert_uchar(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar(a < (double)0      ) ? (uchar)0 :
            convert_uchar(a > (double)DST_MAX) ? (uchar)DST_MAX :
            convert_uchar(a));
  }
    
  uchar2 _cl_overloadable
  convert_uchar2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar2(a < (double)0) ? (uchar2)0 :
              convert_uchar2(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar2(a < (double)0      ) ? (uchar2)0 :
            convert_uchar2(a > (double)DST_MAX) ? (uchar2)DST_MAX :
            convert_uchar2(a));
  }
    
  uchar4 _cl_overloadable
  convert_uchar4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar4(a < (double)0) ? (uchar4)0 :
              convert_uchar4(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar4(a < (double)0      ) ? (uchar4)0 :
            convert_uchar4(a > (double)DST_MAX) ? (uchar4)DST_MAX :
            convert_uchar4(a));
  }
    
  uchar8 _cl_overloadable
  convert_uchar8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar8(a < (double)0) ? (uchar8)0 :
              convert_uchar8(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar8(a < (double)0      ) ? (uchar8)0 :
            convert_uchar8(a > (double)DST_MAX) ? (uchar8)DST_MAX :
            convert_uchar8(a));
  }
    
  uchar16 _cl_overloadable
  convert_uchar16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uchar);
    if (dst_size >= src_size) {
      return (convert_uchar16(a < (double)0) ? (uchar16)0 :
              convert_uchar16(a));
    }
    uchar const DST_MAX = UCHAR_MAX;
    return (convert_uchar16(a < (double)0      ) ? (uchar16)0 :
            convert_uchar16(a > (double)DST_MAX) ? (uchar16)DST_MAX :
            convert_uchar16(a));
  }
    
)
__IF_FP64(
  short _cl_overloadable
  convert_short_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short(a < (double)DST_MIN) ? (short)DST_MIN :
            convert_short(a > (double)DST_MAX) ? (short)DST_MAX :
            convert_short(a));
  }
    
  short2 _cl_overloadable
  convert_short2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short2(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short2(a < (double)DST_MIN) ? (short2)DST_MIN :
            convert_short2(a > (double)DST_MAX) ? (short2)DST_MAX :
            convert_short2(a));
  }
    
  short4 _cl_overloadable
  convert_short4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short4(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short4(a < (double)DST_MIN) ? (short4)DST_MIN :
            convert_short4(a > (double)DST_MAX) ? (short4)DST_MAX :
            convert_short4(a));
  }
    
  short8 _cl_overloadable
  convert_short8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short8(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short8(a < (double)DST_MIN) ? (short8)DST_MIN :
            convert_short8(a > (double)DST_MAX) ? (short8)DST_MAX :
            convert_short8(a));
  }
    
  short16 _cl_overloadable
  convert_short16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(short);
    if (dst_size >= src_size) return convert_short16(a);
    short const DST_MIN = SHRT_MIN;
    short const DST_MAX = SHRT_MAX;
    return (convert_short16(a < (double)DST_MIN) ? (short16)DST_MIN :
            convert_short16(a > (double)DST_MAX) ? (short16)DST_MAX :
            convert_short16(a));
  }
    
)
__IF_FP64(
  ushort _cl_overloadable
  convert_ushort_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort(a < (double)0) ? (ushort)0 :
              convert_ushort(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort(a < (double)0      ) ? (ushort)0 :
            convert_ushort(a > (double)DST_MAX) ? (ushort)DST_MAX :
            convert_ushort(a));
  }
    
  ushort2 _cl_overloadable
  convert_ushort2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort2(a < (double)0) ? (ushort2)0 :
              convert_ushort2(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort2(a < (double)0      ) ? (ushort2)0 :
            convert_ushort2(a > (double)DST_MAX) ? (ushort2)DST_MAX :
            convert_ushort2(a));
  }
    
  ushort4 _cl_overloadable
  convert_ushort4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort4(a < (double)0) ? (ushort4)0 :
              convert_ushort4(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort4(a < (double)0      ) ? (ushort4)0 :
            convert_ushort4(a > (double)DST_MAX) ? (ushort4)DST_MAX :
            convert_ushort4(a));
  }
    
  ushort8 _cl_overloadable
  convert_ushort8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort8(a < (double)0) ? (ushort8)0 :
              convert_ushort8(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort8(a < (double)0      ) ? (ushort8)0 :
            convert_ushort8(a > (double)DST_MAX) ? (ushort8)DST_MAX :
            convert_ushort8(a));
  }
    
  ushort16 _cl_overloadable
  convert_ushort16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ushort);
    if (dst_size >= src_size) {
      return (convert_ushort16(a < (double)0) ? (ushort16)0 :
              convert_ushort16(a));
    }
    ushort const DST_MAX = USHRT_MAX;
    return (convert_ushort16(a < (double)0      ) ? (ushort16)0 :
            convert_ushort16(a > (double)DST_MAX) ? (ushort16)DST_MAX :
            convert_ushort16(a));
  }
    
)
__IF_FP64(
  int _cl_overloadable
  convert_int_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int(a < (double)DST_MIN) ? (int)DST_MIN :
            convert_int(a > (double)DST_MAX) ? (int)DST_MAX :
            convert_int(a));
  }
    
  int2 _cl_overloadable
  convert_int2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int2(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int2(a < (double)DST_MIN) ? (int2)DST_MIN :
            convert_int2(a > (double)DST_MAX) ? (int2)DST_MAX :
            convert_int2(a));
  }
    
  int4 _cl_overloadable
  convert_int4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int4(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int4(a < (double)DST_MIN) ? (int4)DST_MIN :
            convert_int4(a > (double)DST_MAX) ? (int4)DST_MAX :
            convert_int4(a));
  }
    
  int8 _cl_overloadable
  convert_int8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int8(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int8(a < (double)DST_MIN) ? (int8)DST_MIN :
            convert_int8(a > (double)DST_MAX) ? (int8)DST_MAX :
            convert_int8(a));
  }
    
  int16 _cl_overloadable
  convert_int16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(int);
    if (dst_size >= src_size) return convert_int16(a);
    int const DST_MIN = INT_MIN;
    int const DST_MAX = INT_MAX;
    return (convert_int16(a < (double)DST_MIN) ? (int16)DST_MIN :
            convert_int16(a > (double)DST_MAX) ? (int16)DST_MAX :
            convert_int16(a));
  }
    
)
__IF_FP64(
  uint _cl_overloadable
  convert_uint_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint(a < (double)0) ? (uint)0 :
              convert_uint(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint(a < (double)0      ) ? (uint)0 :
            convert_uint(a > (double)DST_MAX) ? (uint)DST_MAX :
            convert_uint(a));
  }
    
  uint2 _cl_overloadable
  convert_uint2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint2(a < (double)0) ? (uint2)0 :
              convert_uint2(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint2(a < (double)0      ) ? (uint2)0 :
            convert_uint2(a > (double)DST_MAX) ? (uint2)DST_MAX :
            convert_uint2(a));
  }
    
  uint4 _cl_overloadable
  convert_uint4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint4(a < (double)0) ? (uint4)0 :
              convert_uint4(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint4(a < (double)0      ) ? (uint4)0 :
            convert_uint4(a > (double)DST_MAX) ? (uint4)DST_MAX :
            convert_uint4(a));
  }
    
  uint8 _cl_overloadable
  convert_uint8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint8(a < (double)0) ? (uint8)0 :
              convert_uint8(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint8(a < (double)0      ) ? (uint8)0 :
            convert_uint8(a > (double)DST_MAX) ? (uint8)DST_MAX :
            convert_uint8(a));
  }
    
  uint16 _cl_overloadable
  convert_uint16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(uint);
    if (dst_size >= src_size) {
      return (convert_uint16(a < (double)0) ? (uint16)0 :
              convert_uint16(a));
    }
    uint const DST_MAX = UINT_MAX;
    return (convert_uint16(a < (double)0      ) ? (uint16)0 :
            convert_uint16(a > (double)DST_MAX) ? (uint16)DST_MAX :
            convert_uint16(a));
  }
    
)
__IF_INT64(
  long _cl_overloadable
  convert_long_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long(a < (double)DST_MIN) ? (long)DST_MIN :
            convert_long(a > (double)DST_MAX) ? (long)DST_MAX :
            convert_long(a));
  }
    
  long2 _cl_overloadable
  convert_long2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long2(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long2(a < (double)DST_MIN) ? (long2)DST_MIN :
            convert_long2(a > (double)DST_MAX) ? (long2)DST_MAX :
            convert_long2(a));
  }
    
  long4 _cl_overloadable
  convert_long4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long4(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long4(a < (double)DST_MIN) ? (long4)DST_MIN :
            convert_long4(a > (double)DST_MAX) ? (long4)DST_MAX :
            convert_long4(a));
  }
    
  long8 _cl_overloadable
  convert_long8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long8(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long8(a < (double)DST_MIN) ? (long8)DST_MIN :
            convert_long8(a > (double)DST_MAX) ? (long8)DST_MAX :
            convert_long8(a));
  }
    
  long16 _cl_overloadable
  convert_long16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(long);
    if (dst_size >= src_size) return convert_long16(a);
    long const DST_MIN = LONG_MIN;
    long const DST_MAX = LONG_MAX;
    return (convert_long16(a < (double)DST_MIN) ? (long16)DST_MIN :
            convert_long16(a > (double)DST_MAX) ? (long16)DST_MAX :
            convert_long16(a));
  }
    
)
__IF_INT64(
  ulong _cl_overloadable
  convert_ulong_sat(double a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong(a < (double)0) ? (ulong)0 :
              convert_ulong(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong(a < (double)0      ) ? (ulong)0 :
            convert_ulong(a > (double)DST_MAX) ? (ulong)DST_MAX :
            convert_ulong(a));
  }
    
  ulong2 _cl_overloadable
  convert_ulong2_sat(double2 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong2(a < (double)0) ? (ulong2)0 :
              convert_ulong2(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong2(a < (double)0      ) ? (ulong2)0 :
            convert_ulong2(a > (double)DST_MAX) ? (ulong2)DST_MAX :
            convert_ulong2(a));
  }
    
  ulong4 _cl_overloadable
  convert_ulong4_sat(double4 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong4(a < (double)0) ? (ulong4)0 :
              convert_ulong4(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong4(a < (double)0      ) ? (ulong4)0 :
            convert_ulong4(a > (double)DST_MAX) ? (ulong4)DST_MAX :
            convert_ulong4(a));
  }
    
  ulong8 _cl_overloadable
  convert_ulong8_sat(double8 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong8(a < (double)0) ? (ulong8)0 :
              convert_ulong8(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong8(a < (double)0      ) ? (ulong8)0 :
            convert_ulong8(a > (double)DST_MAX) ? (ulong8)DST_MAX :
            convert_ulong8(a));
  }
    
  ulong16 _cl_overloadable
  convert_ulong16_sat(double16 a)
  {
    int const src_size = sizeof(double);
    int const dst_size = sizeof(ulong);
    if (dst_size >= src_size) {
      return (convert_ulong16(a < (double)0) ? (ulong16)0 :
              convert_ulong16(a));
    }
    ulong const DST_MAX = ULONG_MAX;
    return (convert_ulong16(a < (double)0      ) ? (ulong16)0 :
            convert_ulong16(a > (double)DST_MAX) ? (ulong16)DST_MAX :
            convert_ulong16(a));
  }
    
)
