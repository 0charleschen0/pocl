# Testsuite for Portable OpenCL.
#
# Makefile.am for pocl/lib/kernel.
# 
# Copyright (c) 2011 Universidad Rey Juan Carlos
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

AT_INIT()

AT_BANNER([llvmopencl passes tests])

AT_SETUP([LoopBarriers pass])
AT_KEYWORDS([llvmopencl])
for i in $abs_top_srcdir/tests/loopbarriers*_input.ll
do
  input=`echo $i | sed 's/.*\///'`
  golden=`echo $input | sed s/_input.ll/_golden.ll/`
  output=`echo $input | sed s/_input.ll/_output.ll/`
  reapply=`echo $input | sed s/_input.ll/_reapply.ll/`
  echo "input=$input"
  echo "output=$output"
  echo "golden=$golden"
  echo "reapply=$reapply"
  cp $abs_top_srcdir/tests/$input .
  cp $abs_top_srcdir/tests/$golden .
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -loop-barriers -S -o $output $input])
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -loop-barriers -loop-barriers -S -o $reapply $input])
  AT_CHECK([cmp $output $golden])
  AT_CHECK([cmp $reapply $output])
done
AT_CLEANUP

AT_SETUP([CanonicalizeBarriers pass])
AT_KEYWORDS([llvmopencl])
for i in $abs_top_srcdir/tests/barriers*_input.ll
do
  input=`echo $i | sed 's/.*\///'`
  golden=`echo $input | sed s/_input.ll/_golden.ll/`
  output=`echo $input | sed s/_input.ll/_output.ll/`
  reapply=`echo $input | sed s/_input.ll/_reapply.ll/`
  echo "input=$input"
  echo "output=$output"
  echo "golden=$golden"
  echo "reapply=$reapply"
  cp $abs_top_srcdir/tests/$input .
  cp $abs_top_srcdir/tests/$golden .
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriers -S -o $output $input])
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriers -barriers -S -o $reapply $input])
  AT_CHECK([cmp $output $golden])
  AT_CHECK([cmp $reapply $output])
done
AT_CLEANUP

AT_SETUP([BarrierTailReplication pass])
AT_KEYWORDS([llvmopencl])
for i in $abs_top_srcdir/tests/barriertails*_input.ll
do
  input=`echo $i | sed 's/.*\///'`
  golden=`echo $input | sed s/_input.ll/_golden.ll/`
  output=`echo $input | sed s/_input.ll/_output.ll/`
  reapply=`echo $input | sed s/_input.ll/_reapply.ll/`
  echo "input=$input"
  echo "output=$output"
  echo "golden=$golden"
  echo "reapply=$reapply"
  cp $abs_top_srcdir/tests/$input .
  cp $abs_top_srcdir/tests/$golden .
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriertails -S -o $output $input])
  AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriertails -barriertails -S -o $reapply $input])
  AT_CHECK([cmp $output $golden])
  AT_CHECK([cmp $reapply $output])
done
AT_CLEANUP

AT_SETUP([Pass composition])
AT_KEYWORDS([llvmopencl])
for type in btr loops barriers workitem
do
  for i in $abs_top_srcdir/tests/*_$type.ll
  do
    golden=`echo $i | sed 's/.*\///' | sed s/.ll/_golden.ll/`
    input=`echo $golden | sed s/_${type}_golden.ll/.ll/`
    output=`echo $golden | sed s/_golden.ll/_output.ll/`
    echo "input=$input"
    echo "output=$output"
    echo "golden=$golden"
    cp $i $golden
    cp $abs_top_srcdir/tests/$input .
    case $type in
      btr)      AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriertails -S -o $output $input], 0, ignore, ignore) ;;
      loops)    AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -loop-simplify -loop-barriers -S -o $output $input], 0, ignore, ignore) ;;
      barriers) AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -barriers -S -o $output $input], 0, ignore, ignore) ;;
      workitem) AT_CHECK([opt -load $abs_top_builddir/lib/llvmopencl/.libs/llvmopencl.so -verify-dom-info -verify-loop-info -workitem -local-size=2 2 2 -S -o $output $input], 0, ignore, ignore) ;;
    esac
    AT_CHECK([cmp $output $golden])
  done
done
AT_CLEANUP

AT_BANNER([OpenCL specification tests])

AT_SETUP([example1: dot product])
AT_DATA([expout],
[(0.000000, 0.000000, 0.000000, 0.000000) . (0.000000, 0.000000, 0.000000, 0.000000) = 0.000000
(1.000000, 1.000000, 1.000000, 1.000000) . (1.000000, 1.000000, 1.000000, 1.000000) = 4.000000
(2.000000, 2.000000, 2.000000, 2.000000) . (2.000000, 2.000000, 2.000000, 2.000000) = 16.000000
(3.000000, 3.000000, 3.000000, 3.000000) . (3.000000, 3.000000, 3.000000, 3.000000) = 36.000000
OK
])
AT_CHECK([$abs_top_builddir/examples/example1/example1], 0, expout)
AT_CLEANUP

AT_SETUP([example2: matrix transpose])
AT_CHECK([$abs_top_builddir/examples/example2/example2], 0, [OK
])
AT_CLEANUP

AT_SETUP([example2a: matrix transpose (automatic locals)])
AT_CHECK([$abs_top_builddir/examples/example2a/example2a], 0, [OK
])
AT_CLEANUP

AT_BANNER([Workgroup creation tests])

AT_SETUP([Unconditional barriers])
AT_CHECK([$abs_top_builddir/examples/barriers/barriers], 0, stdout)
AT_CHECK([cat stdout | wc -l], 0, [12
])
AT_CLEANUP

AT_SETUP([Unbarriered for loops])
AT_CHECK([$abs_top_builddir/examples/forloops/forloops], 0, stdout)
AT_CHECK([cat stdout | wc -l], 0, [4
])
AT_CLEANUP

AT_SETUP([Barriered for loops])
AT_CHECK([$abs_top_builddir/examples/loopbarriers/loopbarriers], 0, stdout)
AT_CHECK([sort -c stdout])
AT_CLEANUP
          
AT_BANNER([Kernel runtime library])

AT_SETUP([Trigonometric functions])
AT_DATA([expout],
[f(0.000000, 0.000000, 0.000000, 0.000000) = (1.000000, 1.000000, 1.000000, 1.000000)
f(1.000000, 1.000000, 1.000000, 1.000000) = (1.000000, 1.000000, 1.000000, 1.000000)
f(2.000000, 2.000000, 2.000000, 2.000000) = (0.909297, 0.909297, 0.909297, 0.909297)
f(3.000000, 3.000000, 3.000000, 3.000000) = (1.732051, 1.732051, 1.732051, 1.732051)
f(4.000000, 4.000000, 4.000000, 4.000000) = (1.157821, 1.157821, 1.157821, 1.157821)
f(5.000000, 5.000000, 5.000000, 5.000000) = (0.283662, 0.283662, 0.283662, 0.283662)
f(6.000000, 6.000000, 6.000000, 6.000000) = (6.000000, 6.000000, 6.000000, 6.000000)
f(7.000000, 7.000000, 7.000000, 7.000000) = (0.656987, 0.656987, 0.656987, 0.656987)
OK
])
AT_CHECK([$abs_top_builddir/examples/trig/trig], 0, expout)
AT_CLEANUP
          
AT_BANNER([Full applications])

AT_SETUP([Scalar wave equation])
AT_DATA([expout],
# TODO: add real output
[OK
])
AT_CHECK([$abs_top_builddir/examples/scalarwave/scalarwave], 0, expout)
AT_CLEANUP
