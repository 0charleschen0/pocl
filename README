This directory tree holds Portable OpenCL (pocl), a (still in-development)
implementation of OpenCL standard which can be easily adapted for new targets.

The file INSTALL in this directory says how to build and install packages
which use the GNU build system, most of which is valid for the pocl
distribution.

This file provides additional information on required software packages,
special configure flags pocl might use, running pocl examples and using
pocl as the OpenCL implementation with any program that uses OpenCL. It
also describes the standalone compilation mode which might be used to
statically link kernels with your own program, and how to call any
host C library or syscall in your kernels which might be usefull for
kernel debugging (see HOST LIBRARY CALLS).


REQUIRED SOFTWARE PACKAGES

To build pocl, apart from a decent development environment (C/C++ compiler,
make) the following packages are needed:

llvm (3.0 branch)
clang (3.0 branch)


CONFIGURING

If you checked out a development version of pocl, the configuration
scripts need to be regenerated. This is achieved by issuing the command

    ./autogen.sh

in the root of the source tree (you will need a decent version of GNU
autotools).

Once that is done, the usual GNU build system

    ./configure && make

is enough to build pocl. Builds out of source directory are also supported.
The configure script will use the following special environment variables,
if present or passed in the command line:

    CLANG         Program to compile kernels to bytecode
    CLANGFLAGS    Flags to be passed to CLANG


EXAMPLES

After build is complete, a number of examples are ready to be run on
the subdirectories under examples/. To run them, just go to each directory
and run the executable there (executable name matches subdirectory name).

    example1      Dot product example from OpenCL specification
    example2      Matrix transpose example from OpenCL specification
    barriers      Simple barrier synchronization exampls
    forloops      Simple example wth for loops inside the kernel
    standalone    Non-executable standalone example (see STANDALONE section)


LINKING YOUR PROGRAM WITH POCL

During installation, pocl places a copy of standard OpenCL headers in
<prefix>/include/CL, and the host runtime OpenCL library (libCL) in
<prefix>/lib.

Passing the appropiate linker flags is enough to use pocl in your
program. Bear in mind that:

    1. The current distribution only supports one device, "native",
       which runs the kernels in the host system.
    2. Current implementation of both host and kernel runtime libraries
       is far for complete. If your program uses any of the unimplemented
       API calls, it will not work.


STANDALONE

(todo)


HOST LIBRARY CALLS

When using the "native" device, that runs the kernels on the host (after
statically replicating them), the kernels might use any library or system
call in the host. Examples "barriers" and "forloops" show how to call
"printf" inside the kernel, but any other host function can be called
as well. This can prove quite useful when debugging OpenCL kernels.