#!/bin/sh
# pocl-standalone - Run parallelization passes directly on an OpenCL source
#                   file and generate a parallel bytecode and a kernel description
#                   header file.
# 
# Copyright (c) 2011 Universidad Rey Juan Carlos
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

kernel_lib_dir="/@HOST_ARCH@"
while getopts h:t:o: o
do
    case "$o" in
	h)   header="${OPTARG}";;
	t)   kernel_lib_dir="/${OPTARG}";;
	o)   output_file="${OPTARG}";;
	[?]) echo >&2 "Usage: $0 -o <output_file> <input_file>" && exit 1;;
    esac
done
shift $((${OPTIND}-1))

if [ "x$header" = x ]
then
    echo >&2 "Usage: $0 [-t target] -header <header> -o <output_file> <input_file>" && exit 1
fi

if [ "x$output_file" = x ]
then
    echo >&2 "Usage: $0 [-t target] -header <header> -o <output_file> <input_file>" && exit 1
fi

if test -z "$CLANGFLAGS"
then
    CLANGFLAGS="@CLANGFLAGS@"
fi

tempdir="`dirname ${output_file}`/.pocl$$"
mkdir ${tempdir}

kernel_bc="${tempdir}/kernel.bc"

if [ -f @abs_top_srcdir@/include/_kernel.h ]
then 
    @CLANG@ @CLANGFLAGS@ @NATIVE_CLANG_FLAGS@ $EXTRA_CLANG_FLAGS -c -emit-llvm -I@abs_top_builddir@ -include @abs_top_srcdir@/include/types.h -include @abs_top_srcdir@/include/_kernel.h -o ${kernel_bc} -x cl $1
else
    @CLANG@ @CLANGFLAGS@ @NATIVE_CLANG_FLAGS@ $EXTRA_CLANG_FLAGS -c -emit-llvm  -include @pkgincludedir@/types.h -include @pkgincludedir@/_kernel.h -o ${kernel_bc} -x cl $1
fi

rm -f ${header}

if [ -f @abs_top_builddir@/lib/llvmopencl/.libs/llvmopencl.so ]
then
    @OPT@ -load=@abs_top_builddir@/lib/llvmopencl/.libs/llvmopencl.so -generate-header -disable-output -header=${header} ${kernel_bc}
else
    @OPT@ -load=@pkglibdir@/llvmopencl.so -generate-header -disable-output -header=${header} ${kernel_bc}
fi

linked_bc="${tempdir}/linked.bc"

if [ -f @abs_top_builddir@/lib/kernel${kernel_lib_dir}/libkernel.a ]
then
    @LLVM_LD@ -b ${linked_bc} ${kernel_bc} -L@abs_top_builddir@/lib/kernel${kernel_lib_dir} -lkernel
else
    @LLVM_LD@ -b ${linked_bc} ${kernel_bc} -L@pkglibdir@${kernel_lib_dir} -lkernel
fi
rm a.out

if [ -f @abs_top_builddir@/lib/llvmopencl/.libs/llvmopencl.so ]
then
    @OPT@ -load=@abs_top_builddir@/lib/llvmopencl/.libs/llvmopencl.so -loop-simplify -loop-barriers -barriertails -barriers -workitem -workgroup -local-size=1 1 1 -o ${output_file} ${linked_bc}
else
    @OPT@ -load=@pkglibdir@/llvmopencl.so -loop-simplify -loop-barriers -barriertails -barriers -workitem -workgroup -local-size=1 1 1 -o ${output_file} ${linked_bc}
fi
rm -fr ${tempdir}
